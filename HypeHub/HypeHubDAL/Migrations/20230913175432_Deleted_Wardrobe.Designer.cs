// <auto-generated />
using System;
using HypeHubDAL.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HypeHubDAL.Migrations
{
    [DbContext(typeof(HypeHubContext))]
    [Migration("20230913175432_Deleted_Wardrobe")]
    partial class Deleted_Wardrobe
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HypeHubDAL.Models.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccountTypes")
                        .HasColumnType("int");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d1f0397c-360c-47bd-9452-9ddbe3355101"),
                            AccountTypes = 0,
                            AvatarUrl = "https://example.com/avatar/user1.png",
                            IsPrivate = false,
                            Username = "User1"
                        },
                        new
                        {
                            Id = new Guid("e62c9e73-3590-4ff0-bf2f-6daee0229552"),
                            AccountTypes = 0,
                            IsPrivate = true,
                            Username = "User2"
                        });
                });

            modelBuilder.Entity("HypeHubDAL.Models.AccountCredentials", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("AccountCredentials");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2fb2c037-b784-49d8-a1c9-fcfa0e709e1b"),
                            AccountId = new Guid("d1f0397c-360c-47bd-9452-9ddbe3355101"),
                            Email = "User1@gmail.com",
                            Password = "hasłoMasło188"
                        },
                        new
                        {
                            Id = new Guid("f33eabfa-9eb9-4c5c-b62c-65e269240540"),
                            AccountId = new Guid("e62c9e73-3590-4ff0-bf2f-6daee0229552"),
                            Email = "User2@gmail.com",
                            Password = "hasłoMasło591"
                        });
                });

            modelBuilder.Entity("HypeHubDAL.Models.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CloathingType")
                        .HasColumnType("int");

                    b.Property<string>("Colorway")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            Id = new Guid("763ce401-ec6f-4aa0-826c-aca06be0d961"),
                            AccountId = new Guid("d1f0397c-360c-47bd-9452-9ddbe3355101"),
                            Brand = "Brand1",
                            CloathingType = 1,
                            Colorway = "Colorway1",
                            Model = "Model1",
                            Name = "Item1",
                            Price = 10m,
                            PurchaseDate = new DateTime(2023, 8, 13, 17, 54, 31, 888, DateTimeKind.Utc).AddTicks(2035)
                        },
                        new
                        {
                            Id = new Guid("901596a2-fcd5-45fc-8000-a622a9344973"),
                            AccountId = new Guid("e62c9e73-3590-4ff0-bf2f-6daee0229552"),
                            Brand = "Brand1",
                            CloathingType = 1,
                            Colorway = "Colorway1",
                            Model = "Model1",
                            Name = "Item1",
                            Price = 10m,
                            PurchaseDate = new DateTime(2023, 8, 13, 17, 54, 31, 888, DateTimeKind.Utc).AddTicks(2065)
                        });
                });

            modelBuilder.Entity("HypeHubDAL.Models.ItemImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemsImages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f9b070fd-c134-43c0-a8d9-2dc439213e9e"),
                            ItemId = new Guid("763ce401-ec6f-4aa0-826c-aca06be0d961"),
                            Url = "exampleURL"
                        },
                        new
                        {
                            Id = new Guid("b1ec3574-75a3-468e-839e-153e3bccf296"),
                            ItemId = new Guid("901596a2-fcd5-45fc-8000-a622a9344973"),
                            Url = "exampleURL"
                        });
                });

            modelBuilder.Entity("HypeHubDAL.Models.Outfit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Outfits");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e7159096-4224-455b-b2c4-3cb307f72521"),
                            AccountId = new Guid("d1f0397c-360c-47bd-9452-9ddbe3355101"),
                            Name = "Outfit352"
                        },
                        new
                        {
                            Id = new Guid("4964428f-9280-487b-90c8-43090827b7b2"),
                            AccountId = new Guid("d1f0397c-360c-47bd-9452-9ddbe3355101"),
                            Name = "Outfit960"
                        },
                        new
                        {
                            Id = new Guid("5929c1ac-0eeb-4c13-b348-e5f394f34d0e"),
                            AccountId = new Guid("e62c9e73-3590-4ff0-bf2f-6daee0229552"),
                            Name = "Outfit735"
                        },
                        new
                        {
                            Id = new Guid("43d96434-d58f-4f1d-8e86-47d3a8e999ee"),
                            AccountId = new Guid("e62c9e73-3590-4ff0-bf2f-6daee0229552"),
                            Name = "Outfit727"
                        });
                });

            modelBuilder.Entity("HypeHubDAL.Models.OutfitImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OutfitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OutfitId");

                    b.ToTable("OutfitImages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9582f01d-ebf3-4a74-b778-bb14d899a6ab"),
                            OutfitId = new Guid("e7159096-4224-455b-b2c4-3cb307f72521"),
                            Url = "exampleURL"
                        },
                        new
                        {
                            Id = new Guid("b007172f-e8b8-45c4-a865-83967b5cff72"),
                            OutfitId = new Guid("4964428f-9280-487b-90c8-43090827b7b2"),
                            Url = "exampleURL"
                        },
                        new
                        {
                            Id = new Guid("1707dd11-7a59-4868-9535-a72afc56ec6d"),
                            OutfitId = new Guid("5929c1ac-0eeb-4c13-b348-e5f394f34d0e"),
                            Url = "exampleURL"
                        },
                        new
                        {
                            Id = new Guid("2990dbb8-0bfe-434b-8f77-c6d1b62b178a"),
                            OutfitId = new Guid("43d96434-d58f-4f1d-8e86-47d3a8e999ee"),
                            Url = "exampleURL"
                        });
                });

            modelBuilder.Entity("HypeHubDAL.Models.Relations.AccountItemLike", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("AccountItemLikes");
                });

            modelBuilder.Entity("HypeHubDAL.Models.Relations.AccountOutfitLike", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OutfitId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OutfitId");

                    b.ToTable("AccountOutfitLikes");
                });

            modelBuilder.Entity("HypeHubDAL.Models.Relations.OutfitItem", b =>
                {
                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OutfitId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ItemId", "OutfitId");

                    b.HasIndex("OutfitId");

                    b.ToTable("OutfitItems");
                });

            modelBuilder.Entity("HypeHubDAL.Models.AccountCredentials", b =>
                {
                    b.HasOne("HypeHubDAL.Models.Account", "Account")
                        .WithOne("Credentials")
                        .HasForeignKey("HypeHubDAL.Models.AccountCredentials", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("HypeHubDAL.Models.Item", b =>
                {
                    b.HasOne("HypeHubDAL.Models.Account", "Account")
                        .WithMany("Items")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("HypeHubDAL.Models.ItemImage", b =>
                {
                    b.HasOne("HypeHubDAL.Models.Item", "Item")
                        .WithMany("Images")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("HypeHubDAL.Models.Outfit", b =>
                {
                    b.HasOne("HypeHubDAL.Models.Account", "Account")
                        .WithMany("Outfits")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("HypeHubDAL.Models.OutfitImage", b =>
                {
                    b.HasOne("HypeHubDAL.Models.Outfit", "Outfit")
                        .WithMany("Images")
                        .HasForeignKey("OutfitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Outfit");
                });

            modelBuilder.Entity("HypeHubDAL.Models.Relations.AccountItemLike", b =>
                {
                    b.HasOne("HypeHubDAL.Models.Item", "Item")
                        .WithMany("Likes")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("HypeHubDAL.Models.Relations.AccountOutfitLike", b =>
                {
                    b.HasOne("HypeHubDAL.Models.Outfit", "Outfit")
                        .WithMany("Likes")
                        .HasForeignKey("OutfitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Outfit");
                });

            modelBuilder.Entity("HypeHubDAL.Models.Relations.OutfitItem", b =>
                {
                    b.HasOne("HypeHubDAL.Models.Item", null)
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HypeHubDAL.Models.Outfit", null)
                        .WithMany()
                        .HasForeignKey("OutfitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HypeHubDAL.Models.Account", b =>
                {
                    b.Navigation("Credentials")
                        .IsRequired();

                    b.Navigation("Items");

                    b.Navigation("Outfits");
                });

            modelBuilder.Entity("HypeHubDAL.Models.Item", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Likes");
                });

            modelBuilder.Entity("HypeHubDAL.Models.Outfit", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Likes");
                });
#pragma warning restore 612, 618
        }
    }
}
