// <auto-generated />
using System;
using HypeHubDAL.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HypeHubDAL.Migrations
{
    [DbContext(typeof(HypeHubContext))]
    [Migration("20230913205354_Configurators_created")]
    partial class Configurators_created
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HypeHubDAL.Models.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccountTypes")
                        .HasColumnType("int");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ee27627c-0713-4c69-b312-0265cf6d1770"),
                            AccountTypes = 0,
                            AvatarUrl = "https://example.com/avatar/user1.png",
                            IsPrivate = false,
                            Username = "User1"
                        },
                        new
                        {
                            Id = new Guid("508b5c0b-3355-411f-90ab-d74d6213e484"),
                            AccountTypes = 0,
                            IsPrivate = true,
                            Username = "User2"
                        });
                });

            modelBuilder.Entity("HypeHubDAL.Models.AccountCredentials", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("AccountCredentials");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4dec7b04-9ad9-4302-ad38-90a65d47d2a9"),
                            AccountId = new Guid("ee27627c-0713-4c69-b312-0265cf6d1770"),
                            Email = "User1@gmail.com",
                            Password = "hasłoMasło304"
                        },
                        new
                        {
                            Id = new Guid("bea029e5-9e1e-4f61-8040-7a3b4e54dc1d"),
                            AccountId = new Guid("508b5c0b-3355-411f-90ab-d74d6213e484"),
                            Email = "User2@gmail.com",
                            Password = "hasłoMasło459"
                        });
                });

            modelBuilder.Entity("HypeHubDAL.Models.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CloathingType")
                        .HasColumnType("int");

                    b.Property<string>("Colorway")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            Id = new Guid("98d5cde6-ce90-4ebb-b0f3-f393cc3a9633"),
                            AccountId = new Guid("ee27627c-0713-4c69-b312-0265cf6d1770"),
                            Brand = "Brand1",
                            CloathingType = 1,
                            Colorway = "Colorway1",
                            Model = "Model1",
                            Name = "Item1",
                            Price = 10m,
                            PurchaseDate = new DateTime(2023, 8, 13, 20, 53, 54, 348, DateTimeKind.Utc).AddTicks(1286)
                        },
                        new
                        {
                            Id = new Guid("cd6992ba-96fa-426a-a971-64b1c964a99c"),
                            AccountId = new Guid("508b5c0b-3355-411f-90ab-d74d6213e484"),
                            Brand = "Brand1",
                            CloathingType = 1,
                            Colorway = "Colorway1",
                            Model = "Model1",
                            Name = "Item1",
                            Price = 10m,
                            PurchaseDate = new DateTime(2023, 8, 13, 20, 53, 54, 348, DateTimeKind.Utc).AddTicks(1321)
                        });
                });

            modelBuilder.Entity("HypeHubDAL.Models.ItemImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemsImages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("522dc7f2-1159-4788-b0a3-db6f5efd9e34"),
                            ItemId = new Guid("98d5cde6-ce90-4ebb-b0f3-f393cc3a9633"),
                            Url = "exampleURL"
                        },
                        new
                        {
                            Id = new Guid("52423c03-87f5-4b4b-8cdd-e77461e517a8"),
                            ItemId = new Guid("cd6992ba-96fa-426a-a971-64b1c964a99c"),
                            Url = "exampleURL"
                        });
                });

            modelBuilder.Entity("HypeHubDAL.Models.Outfit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Outfits");

                    b.HasData(
                        new
                        {
                            Id = new Guid("18196aad-7e6f-4e23-9ec0-55fc91d4cb1c"),
                            AccountId = new Guid("ee27627c-0713-4c69-b312-0265cf6d1770"),
                            Name = "Outfit85"
                        },
                        new
                        {
                            Id = new Guid("d73ae1de-89ca-4b4d-b210-43b841ecb88f"),
                            AccountId = new Guid("ee27627c-0713-4c69-b312-0265cf6d1770"),
                            Name = "Outfit41"
                        },
                        new
                        {
                            Id = new Guid("d1b84d29-f08d-4366-bcab-6f7771e215cf"),
                            AccountId = new Guid("508b5c0b-3355-411f-90ab-d74d6213e484"),
                            Name = "Outfit238"
                        },
                        new
                        {
                            Id = new Guid("d556b333-20df-4b65-8a04-33d44316258d"),
                            AccountId = new Guid("508b5c0b-3355-411f-90ab-d74d6213e484"),
                            Name = "Outfit846"
                        });
                });

            modelBuilder.Entity("HypeHubDAL.Models.OutfitImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OutfitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OutfitId");

                    b.ToTable("OutfitImages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("68f0394d-22ac-4bb7-a16a-672f42c5baed"),
                            OutfitId = new Guid("18196aad-7e6f-4e23-9ec0-55fc91d4cb1c"),
                            Url = "exampleURL"
                        },
                        new
                        {
                            Id = new Guid("96db27c7-dbb5-4525-833e-af21a521ca86"),
                            OutfitId = new Guid("d73ae1de-89ca-4b4d-b210-43b841ecb88f"),
                            Url = "exampleURL"
                        },
                        new
                        {
                            Id = new Guid("9ad6c227-c151-4467-9760-08dbd691d1ee"),
                            OutfitId = new Guid("d1b84d29-f08d-4366-bcab-6f7771e215cf"),
                            Url = "exampleURL"
                        },
                        new
                        {
                            Id = new Guid("1620e0ed-55db-4fdb-8317-9790b6aca495"),
                            OutfitId = new Guid("d556b333-20df-4b65-8a04-33d44316258d"),
                            Url = "exampleURL"
                        });
                });

            modelBuilder.Entity("HypeHubDAL.Models.Relations.AccountItemLike", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("AccountItemLikes");
                });

            modelBuilder.Entity("HypeHubDAL.Models.Relations.AccountOutfitLike", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OutfitId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OutfitId");

                    b.ToTable("AccountOutfitLikes");
                });

            modelBuilder.Entity("HypeHubDAL.Models.Relations.OutfitItem", b =>
                {
                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OutfitId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ItemId", "OutfitId");

                    b.HasIndex("OutfitId");

                    b.ToTable("OutfitItems");
                });

            modelBuilder.Entity("HypeHubDAL.Models.AccountCredentials", b =>
                {
                    b.HasOne("HypeHubDAL.Models.Account", "Account")
                        .WithOne("Credentials")
                        .HasForeignKey("HypeHubDAL.Models.AccountCredentials", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("HypeHubDAL.Models.Item", b =>
                {
                    b.HasOne("HypeHubDAL.Models.Account", "Account")
                        .WithMany("Items")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("HypeHubDAL.Models.ItemImage", b =>
                {
                    b.HasOne("HypeHubDAL.Models.Item", "Item")
                        .WithMany("Images")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("HypeHubDAL.Models.Outfit", b =>
                {
                    b.HasOne("HypeHubDAL.Models.Account", "Account")
                        .WithMany("Outfits")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("HypeHubDAL.Models.OutfitImage", b =>
                {
                    b.HasOne("HypeHubDAL.Models.Outfit", "Outfit")
                        .WithMany("Images")
                        .HasForeignKey("OutfitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Outfit");
                });

            modelBuilder.Entity("HypeHubDAL.Models.Relations.AccountItemLike", b =>
                {
                    b.HasOne("HypeHubDAL.Models.Item", "Item")
                        .WithMany("Likes")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("HypeHubDAL.Models.Relations.AccountOutfitLike", b =>
                {
                    b.HasOne("HypeHubDAL.Models.Outfit", "Outfit")
                        .WithMany("Likes")
                        .HasForeignKey("OutfitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Outfit");
                });

            modelBuilder.Entity("HypeHubDAL.Models.Relations.OutfitItem", b =>
                {
                    b.HasOne("HypeHubDAL.Models.Item", null)
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HypeHubDAL.Models.Outfit", null)
                        .WithMany()
                        .HasForeignKey("OutfitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HypeHubDAL.Models.Account", b =>
                {
                    b.Navigation("Credentials")
                        .IsRequired();

                    b.Navigation("Items");

                    b.Navigation("Outfits");
                });

            modelBuilder.Entity("HypeHubDAL.Models.Item", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Likes");
                });

            modelBuilder.Entity("HypeHubDAL.Models.Outfit", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Likes");
                });
#pragma warning restore 612, 618
        }
    }
}
